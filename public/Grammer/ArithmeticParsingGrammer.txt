{
class Node 
{ 
    constructor(data) 
    { 
        this.symbol = data; 
        this.left = null; 
        this.right = null; 
    } 
}

  function buildBinaryTree(left,right)
  { 
	if(!right || right.length == 0) return left;
  	var root = new Node(right[0][1]);
    root.right = right[0][3];
    root.left = left;
    for(var i = 1; i <right.length;i++)
    {
    	var symbol = right[i][1];
        var leftSubTree = root;
        root = new Node(symbol);
        root.left = leftSubTree;
        root.right = right[i][3];
    }
    return root;
  }
  
  function buildUnaryTree(symbol,count,operand)
  {
      var root = operand;
      for(var i = 0; i < count;i++)
      {
          var subTree = root;
          root = new Node(symbol);
          root.right = subTree;
      }
      return root;
  }
}

rule = _ x:Expression _ {return x}

Expression
  = head:Term tail:(_ ("+" / "-") _ Term)* {return buildBinaryTree(head,tail);}

Term
  = head:Factor tail:(_ ("*" / "/") _ Factor)* {return buildBinaryTree(head,tail);}

Factor
  = 
  negations:(_ '-' _)* "(" _ expr:Expression _ ")" {return buildUnaryTree('-',negations.length,expr);}
/ negations:(_ '-' _)* operand:Operand {return buildUnaryTree('-',negations.length,operand);}

Operand
  = _ [0-9]+ { return parseInt(text(), 10); }

_ "whitespace"
  = [ \t\n\r]*